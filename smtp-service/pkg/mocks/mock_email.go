// Code generated by MockGen. DO NOT EDIT.
	// Source: models/email_model.go

// Package mock_email is a generated GoMock package.
package mocks

import (
	models "mail/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailUseCase is a mock of EmailUseCase interface.
type MockEmailUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockEmailUseCaseMockRecorder
}

// MockEmailUseCaseMockRecorder is the mock recorder for MockEmailUseCase.
type MockEmailUseCaseMockRecorder struct {
	mock *MockEmailUseCase
}

// NewMockEmailUseCase creates a new mock instance.
func NewMockEmailUseCase(ctrl *gomock.Controller) *MockEmailUseCase {
	mock := &MockEmailUseCase{ctrl: ctrl}
	mock.recorder = &MockEmailUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailUseCase) EXPECT() *MockEmailUseCaseMockRecorder {
	return m.recorder
}

// MockSmtpPop3Usecase is a mock of SmtpPop3Usecase interface.
type MockSmtpPop3Usecase struct {
	ctrl     *gomock.Controller
	recorder *MockSmtpPop3UsecaseMockRecorder
}

// MockSmtpPop3UsecaseMockRecorder is the mock recorder for MockSmtpPop3Usecase.
type MockSmtpPop3UsecaseMockRecorder struct {
	mock *MockSmtpPop3Usecase
}


// MockEmailRepository is a mock of EmailRepository interface.
type MockEmailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmailRepositoryMockRecorder
}

// MockEmailRepositoryMockRecorder is the mock recorder for MockEmailRepository.
type MockEmailRepositoryMockRecorder struct {
	mock *MockEmailRepository
}

// NewMockEmailRepository creates a new mock instance.
func NewMockEmailRepository(ctrl *gomock.Controller) *MockEmailRepository {
	mock := &MockEmailRepository{ctrl: ctrl}
	mock.recorder = &MockEmailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailRepository) EXPECT() *MockEmailRepositoryMockRecorder {
	return m.recorder
}


// SaveEmail mocks base method.
func (m *MockEmailRepository) SaveEmail(email models.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEmail indicates an expected call of SaveEmail.
func (mr *MockEmailRepositoryMockRecorder) SaveEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEmail", reflect.TypeOf((*MockEmailRepository)(nil).SaveEmail), email)
}
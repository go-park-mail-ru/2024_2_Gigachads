// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../models/email_model.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "mail/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailUseCase is a mock of EmailUseCase interface.
type MockEmailUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockEmailUseCaseMockRecorder
}

// MockEmailUseCaseMockRecorder is the mock recorder for MockEmailUseCase.
type MockEmailUseCaseMockRecorder struct {
	mock *MockEmailUseCase
}

// NewMockEmailUseCase creates a new mock instance.
func NewMockEmailUseCase(ctrl *gomock.Controller) *MockEmailUseCase {
	mock := &MockEmailUseCase{ctrl: ctrl}
	mock.recorder = &MockEmailUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailUseCase) EXPECT() *MockEmailUseCaseMockRecorder {
	return m.recorder
}

// Inbox mocks base method.
func (m *MockEmailUseCase) Inbox(id string) ([]models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inbox", id)
	ret0, _ := ret[0].([]models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inbox indicates an expected call of Inbox.
func (mr *MockEmailUseCaseMockRecorder) Inbox(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inbox", reflect.TypeOf((*MockEmailUseCase)(nil).Inbox), id)
}

// SendEmail mocks base method.
func (m *MockEmailUseCase) SendEmail(from string, to []string, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", from, to, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailUseCaseMockRecorder) SendEmail(from, to, subject, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailUseCase)(nil).SendEmail), from, to, subject, body)
}

// MockEmailRepository is a mock of EmailRepository interface.
type MockEmailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmailRepositoryMockRecorder
}

// MockEmailRepositoryMockRecorder is the mock recorder for MockEmailRepository.
type MockEmailRepositoryMockRecorder struct {
	mock *MockEmailRepository
}

// NewMockEmailRepository creates a new mock instance.
func NewMockEmailRepository(ctrl *gomock.Controller) *MockEmailRepository {
	mock := &MockEmailRepository{ctrl: ctrl}
	mock.recorder = &MockEmailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailRepository) EXPECT() *MockEmailRepositoryMockRecorder {
	return m.recorder
}

// Inbox mocks base method.
func (m *MockEmailRepository) Inbox(id string) ([]models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inbox", id)
	ret0, _ := ret[0].([]models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inbox indicates an expected call of Inbox.
func (mr *MockEmailRepositoryMockRecorder) Inbox(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inbox", reflect.TypeOf((*MockEmailRepository)(nil).Inbox), id)
}

// MockSMTPRepository is a mock of SMTPRepository interface.
type MockSMTPRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSMTPRepositoryMockRecorder
}

// MockSMTPRepositoryMockRecorder is the mock recorder for MockSMTPRepository.
type MockSMTPRepositoryMockRecorder struct {
	mock *MockSMTPRepository
}

// NewMockSMTPRepository creates a new mock instance.
func NewMockSMTPRepository(ctrl *gomock.Controller) *MockSMTPRepository {
	mock := &MockSMTPRepository{ctrl: ctrl}
	mock.recorder = &MockSMTPRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMTPRepository) EXPECT() *MockSMTPRepositoryMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockSMTPRepository) SendEmail(from string, to []string, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", from, to, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockSMTPRepositoryMockRecorder) SendEmail(from, to, subject, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockSMTPRepository)(nil).SendEmail), from, to, subject, body)
}

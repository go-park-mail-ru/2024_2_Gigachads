// Code generated by MockGen. DO NOT EDIT.
// Source: api-service/internal/models/email_model.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "mail/api-service/internal/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSmtpPop3Usecase is a mock of SmtpPop3Usecase interface.
type MockSmtpPop3Usecase struct {
	ctrl     *gomock.Controller
	recorder *MockSmtpPop3UsecaseMockRecorder
}

// MockSmtpPop3UsecaseMockRecorder is the mock recorder for MockSmtpPop3Usecase.
type MockSmtpPop3UsecaseMockRecorder struct {
	mock *MockSmtpPop3Usecase
}

// NewMockSmtpPop3Usecase creates a new mock instance.
func NewMockSmtpPop3Usecase(ctrl *gomock.Controller) *MockSmtpPop3Usecase {
	mock := &MockSmtpPop3Usecase{ctrl: ctrl}
	mock.recorder = &MockSmtpPop3UsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmtpPop3Usecase) EXPECT() *MockSmtpPop3UsecaseMockRecorder {
	return m.recorder
}

// ForwardEmail mocks base method.
func (m *MockSmtpPop3Usecase) ForwardEmail(ctx context.Context, from string, to []string, originalEmail models.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardEmail", ctx, from, to, originalEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForwardEmail indicates an expected call of ForwardEmail.
func (mr *MockSmtpPop3UsecaseMockRecorder) ForwardEmail(ctx, from, to, originalEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardEmail", reflect.TypeOf((*MockSmtpPop3Usecase)(nil).ForwardEmail), ctx, from, to, originalEmail)
}

// ReplyEmail mocks base method.
func (m *MockSmtpPop3Usecase) ReplyEmail(ctx context.Context, from, to string, originalEmail models.Email, replyText string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyEmail", ctx, from, to, originalEmail, replyText)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyEmail indicates an expected call of ReplyEmail.
func (mr *MockSmtpPop3UsecaseMockRecorder) ReplyEmail(ctx, from, to, originalEmail, replyText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyEmail", reflect.TypeOf((*MockSmtpPop3Usecase)(nil).ReplyEmail), ctx, from, to, originalEmail, replyText)
}

// SendEmail mocks base method.
func (m *MockSmtpPop3Usecase) SendEmail(ctx context.Context, from string, to []string, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, from, to, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockSmtpPop3UsecaseMockRecorder) SendEmail(ctx, from, to, subject, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockSmtpPop3Usecase)(nil).SendEmail), ctx, from, to, subject, body)
}

// MockEmailUseCase is a mock of EmailUseCase interface.
type MockEmailUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockEmailUseCaseMockRecorder
}

// MockEmailUseCaseMockRecorder is the mock recorder for MockEmailUseCase.
type MockEmailUseCaseMockRecorder struct {
	mock *MockEmailUseCase
}

// NewMockEmailUseCase creates a new mock instance.
func NewMockEmailUseCase(ctrl *gomock.Controller) *MockEmailUseCase {
	mock := &MockEmailUseCase{ctrl: ctrl}
	mock.recorder = &MockEmailUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailUseCase) EXPECT() *MockEmailUseCaseMockRecorder {
	return m.recorder
}

// ChangeEmailFolder mocks base method.
func (m *MockEmailUseCase) ChangeEmailFolder(id int, email, folderName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeEmailFolder", id, email, folderName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeEmailFolder indicates an expected call of ChangeEmailFolder.
func (mr *MockEmailUseCaseMockRecorder) ChangeEmailFolder(id, email, folderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeEmailFolder", reflect.TypeOf((*MockEmailUseCase)(nil).ChangeEmailFolder), id, email, folderName)
}

// ChangeStatus mocks base method.
func (m *MockEmailUseCase) ChangeStatus(id int, status bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeStatus indicates an expected call of ChangeStatus.
func (mr *MockEmailUseCaseMockRecorder) ChangeStatus(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockEmailUseCase)(nil).ChangeStatus), id, status)
}

// CreateDraft mocks base method.
func (m *MockEmailUseCase) CreateDraft(email models.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDraft", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDraft indicates an expected call of CreateDraft.
func (mr *MockEmailUseCaseMockRecorder) CreateDraft(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDraft", reflect.TypeOf((*MockEmailUseCase)(nil).CreateDraft), email)
}

// CreateFolder mocks base method.
func (m *MockEmailUseCase) CreateFolder(email, folderName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", email, folderName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFolder indicates an expected call of CreateFolder.
func (mr *MockEmailUseCaseMockRecorder) CreateFolder(email, folderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockEmailUseCase)(nil).CreateFolder), email, folderName)
}

// DeleteAttach mocks base method.
func (m *MockEmailUseCase) DeleteAttach(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttach", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAttach indicates an expected call of DeleteAttach.
func (mr *MockEmailUseCaseMockRecorder) DeleteAttach(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttach", reflect.TypeOf((*MockEmailUseCase)(nil).DeleteAttach), ctx, path)
}

// DeleteEmails mocks base method.
func (m *MockEmailUseCase) DeleteEmails(userEmail string, messageIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmails", userEmail, messageIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmails indicates an expected call of DeleteEmails.
func (mr *MockEmailUseCaseMockRecorder) DeleteEmails(userEmail, messageIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmails", reflect.TypeOf((*MockEmailUseCase)(nil).DeleteEmails), userEmail, messageIDs)
}

// DeleteFolder mocks base method.
func (m *MockEmailUseCase) DeleteFolder(email, folderName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolder", email, folderName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFolder indicates an expected call of DeleteFolder.
func (mr *MockEmailUseCaseMockRecorder) DeleteFolder(email, folderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockEmailUseCase)(nil).DeleteFolder), email, folderName)
}

// ForwardEmail mocks base method.
func (m *MockEmailUseCase) ForwardEmail(ctx context.Context, from string, to []string, originalEmail models.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardEmail", ctx, from, to, originalEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForwardEmail indicates an expected call of ForwardEmail.
func (mr *MockEmailUseCaseMockRecorder) ForwardEmail(ctx, from, to, originalEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardEmail", reflect.TypeOf((*MockEmailUseCase)(nil).ForwardEmail), ctx, from, to, originalEmail)
}

// GetAttach mocks base method.
func (m *MockEmailUseCase) GetAttach(ctx context.Context, path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttach", ctx, path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttach indicates an expected call of GetAttach.
func (mr *MockEmailUseCaseMockRecorder) GetAttach(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttach", reflect.TypeOf((*MockEmailUseCase)(nil).GetAttach), ctx, path)
}

// GetEmailByID mocks base method.
func (m *MockEmailUseCase) GetEmailByID(id int) (models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailByID", id)
	ret0, _ := ret[0].(models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailByID indicates an expected call of GetEmailByID.
func (mr *MockEmailUseCaseMockRecorder) GetEmailByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailByID", reflect.TypeOf((*MockEmailUseCase)(nil).GetEmailByID), id)
}

// GetFolderEmails mocks base method.
func (m *MockEmailUseCase) GetFolderEmails(email, folderName string) ([]models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderEmails", email, folderName)
	ret0, _ := ret[0].([]models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderEmails indicates an expected call of GetFolderEmails.
func (mr *MockEmailUseCaseMockRecorder) GetFolderEmails(email, folderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderEmails", reflect.TypeOf((*MockEmailUseCase)(nil).GetFolderEmails), email, folderName)
}

// GetFolders mocks base method.
func (m *MockEmailUseCase) GetFolders(email string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolders", email)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolders indicates an expected call of GetFolders.
func (mr *MockEmailUseCaseMockRecorder) GetFolders(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolders", reflect.TypeOf((*MockEmailUseCase)(nil).GetFolders), email)
}

// GetSentEmails mocks base method.
func (m *MockEmailUseCase) GetSentEmails(senderEmail string) ([]models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentEmails", senderEmail)
	ret0, _ := ret[0].([]models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentEmails indicates an expected call of GetSentEmails.
func (mr *MockEmailUseCaseMockRecorder) GetSentEmails(senderEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentEmails", reflect.TypeOf((*MockEmailUseCase)(nil).GetSentEmails), senderEmail)
}

// Inbox mocks base method.
func (m *MockEmailUseCase) Inbox(id string) ([]models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inbox", id)
	ret0, _ := ret[0].([]models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inbox indicates an expected call of Inbox.
func (mr *MockEmailUseCaseMockRecorder) Inbox(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inbox", reflect.TypeOf((*MockEmailUseCase)(nil).Inbox), id)
}

// InboxStatus mocks base method.
func (m *MockEmailUseCase) InboxStatus(ctx context.Context, email string, lastModified time.Time) ([]models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InboxStatus", ctx, email, lastModified)
	ret0, _ := ret[0].([]models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InboxStatus indicates an expected call of InboxStatus.
func (mr *MockEmailUseCaseMockRecorder) InboxStatus(ctx, email, lastModified interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InboxStatus", reflect.TypeOf((*MockEmailUseCase)(nil).InboxStatus), ctx, email, lastModified)
}

// RenameFolder mocks base method.
func (m *MockEmailUseCase) RenameFolder(email, folderName, newFolderName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameFolder", email, folderName, newFolderName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameFolder indicates an expected call of RenameFolder.
func (mr *MockEmailUseCaseMockRecorder) RenameFolder(email, folderName, newFolderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFolder", reflect.TypeOf((*MockEmailUseCase)(nil).RenameFolder), email, folderName, newFolderName)
}

// ReplyEmail mocks base method.
func (m *MockEmailUseCase) ReplyEmail(ctx context.Context, from, to string, originalEmail models.Email, replyText string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyEmail", ctx, from, to, originalEmail, replyText)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyEmail indicates an expected call of ReplyEmail.
func (mr *MockEmailUseCaseMockRecorder) ReplyEmail(ctx, from, to, originalEmail, replyText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyEmail", reflect.TypeOf((*MockEmailUseCase)(nil).ReplyEmail), ctx, from, to, originalEmail, replyText)
}

// SaveEmail mocks base method.
func (m *MockEmailUseCase) SaveEmail(ctx context.Context, email models.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEmail", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEmail indicates an expected call of SaveEmail.
func (mr *MockEmailUseCaseMockRecorder) SaveEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEmail", reflect.TypeOf((*MockEmailUseCase)(nil).SaveEmail), ctx, email)
}

// SendDraft mocks base method.
func (m *MockEmailUseCase) SendDraft(email models.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDraft", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDraft indicates an expected call of SendDraft.
func (mr *MockEmailUseCaseMockRecorder) SendDraft(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDraft", reflect.TypeOf((*MockEmailUseCase)(nil).SendDraft), email)
}

// SendEmail mocks base method.
func (m *MockEmailUseCase) SendEmail(ctx context.Context, from string, to []string, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, from, to, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailUseCaseMockRecorder) SendEmail(ctx, from, to, subject, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailUseCase)(nil).SendEmail), ctx, from, to, subject, body)
}

// UpdateDraft mocks base method.
func (m *MockEmailUseCase) UpdateDraft(email models.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDraft", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDraft indicates an expected call of UpdateDraft.
func (mr *MockEmailUseCaseMockRecorder) UpdateDraft(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDraft", reflect.TypeOf((*MockEmailUseCase)(nil).UpdateDraft), email)
}

// UploadAttach mocks base method.
func (m *MockEmailUseCase) UploadAttach(ctx context.Context, fileContent []byte, filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAttach", ctx, fileContent, filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAttach indicates an expected call of UploadAttach.
func (mr *MockEmailUseCaseMockRecorder) UploadAttach(ctx, fileContent, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAttach", reflect.TypeOf((*MockEmailUseCase)(nil).UploadAttach), ctx, fileContent, filename)
}

// MockEmailRepository is a mock of EmailRepository interface.
type MockEmailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmailRepositoryMockRecorder
}

// MockEmailRepositoryMockRecorder is the mock recorder for MockEmailRepository.
type MockEmailRepositoryMockRecorder struct {
	mock *MockEmailRepository
}

// NewMockEmailRepository creates a new mock instance.
func NewMockEmailRepository(ctrl *gomock.Controller) *MockEmailRepository {
	mock := &MockEmailRepository{ctrl: ctrl}
	mock.recorder = &MockEmailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailRepository) EXPECT() *MockEmailRepositoryMockRecorder {
	return m.recorder
}

// ChangeEmailFolder mocks base method.
func (m *MockEmailRepository) ChangeEmailFolder(id int, email, folderName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeEmailFolder", id, email, folderName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeEmailFolder indicates an expected call of ChangeEmailFolder.
func (mr *MockEmailRepositoryMockRecorder) ChangeEmailFolder(id, email, folderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeEmailFolder", reflect.TypeOf((*MockEmailRepository)(nil).ChangeEmailFolder), id, email, folderName)
}

// ChangeStatus mocks base method.
func (m *MockEmailRepository) ChangeStatus(id int, status bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeStatus indicates an expected call of ChangeStatus.
func (mr *MockEmailRepositoryMockRecorder) ChangeStatus(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockEmailRepository)(nil).ChangeStatus), id, status)
}

// CheckFolder mocks base method.
func (m *MockEmailRepository) CheckFolder(email, folderName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFolder", email, folderName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFolder indicates an expected call of CheckFolder.
func (mr *MockEmailRepositoryMockRecorder) CheckFolder(email, folderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFolder", reflect.TypeOf((*MockEmailRepository)(nil).CheckFolder), email, folderName)
}

// ConnectAttachToMessage mocks base method.
func (m *MockEmailRepository) ConnectAttachToMessage(messageID int, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectAttachToMessage", messageID, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectAttachToMessage indicates an expected call of ConnectAttachToMessage.
func (mr *MockEmailRepositoryMockRecorder) ConnectAttachToMessage(messageID, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectAttachToMessage", reflect.TypeOf((*MockEmailRepository)(nil).ConnectAttachToMessage), messageID, path)
}

// CreateDraft mocks base method.
func (m *MockEmailRepository) CreateDraft(email models.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDraft", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDraft indicates an expected call of CreateDraft.
func (mr *MockEmailRepositoryMockRecorder) CreateDraft(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDraft", reflect.TypeOf((*MockEmailRepository)(nil).CreateDraft), email)
}

// CreateFolder mocks base method.
func (m *MockEmailRepository) CreateFolder(email, folderName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", email, folderName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFolder indicates an expected call of CreateFolder.
func (mr *MockEmailRepositoryMockRecorder) CreateFolder(email, folderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockEmailRepository)(nil).CreateFolder), email, folderName)
}

// DeleteAttach mocks base method.
func (m *MockEmailRepository) DeleteAttach(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttach", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAttach indicates an expected call of DeleteAttach.
func (mr *MockEmailRepositoryMockRecorder) DeleteAttach(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttach", reflect.TypeOf((*MockEmailRepository)(nil).DeleteAttach), ctx, path)
}

// DeleteEmails mocks base method.
func (m *MockEmailRepository) DeleteEmails(userEmail string, messageIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmails", userEmail, messageIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmails indicates an expected call of DeleteEmails.
func (mr *MockEmailRepositoryMockRecorder) DeleteEmails(userEmail, messageIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmails", reflect.TypeOf((*MockEmailRepository)(nil).DeleteEmails), userEmail, messageIDs)
}

// DeleteFolder mocks base method.
func (m *MockEmailRepository) DeleteFolder(email, folderName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolder", email, folderName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFolder indicates an expected call of DeleteFolder.
func (mr *MockEmailRepositoryMockRecorder) DeleteFolder(email, folderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockEmailRepository)(nil).DeleteFolder), email, folderName)
}

// GetAttach mocks base method.
func (m *MockEmailRepository) GetAttach(ctx context.Context, path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttach", ctx, path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttach indicates an expected call of GetAttach.
func (mr *MockEmailRepositoryMockRecorder) GetAttach(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttach", reflect.TypeOf((*MockEmailRepository)(nil).GetAttach), ctx, path)
}

// GetEmailByID mocks base method.
func (m *MockEmailRepository) GetEmailByID(id int) (models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailByID", id)
	ret0, _ := ret[0].(models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailByID indicates an expected call of GetEmailByID.
func (mr *MockEmailRepositoryMockRecorder) GetEmailByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailByID", reflect.TypeOf((*MockEmailRepository)(nil).GetEmailByID), id)
}

// GetFolderEmails mocks base method.
func (m *MockEmailRepository) GetFolderEmails(email, folderName string) ([]models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderEmails", email, folderName)
	ret0, _ := ret[0].([]models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderEmails indicates an expected call of GetFolderEmails.
func (mr *MockEmailRepositoryMockRecorder) GetFolderEmails(email, folderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderEmails", reflect.TypeOf((*MockEmailRepository)(nil).GetFolderEmails), email, folderName)
}

// GetFolders mocks base method.
func (m *MockEmailRepository) GetFolders(email string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolders", email)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolders indicates an expected call of GetFolders.
func (mr *MockEmailRepositoryMockRecorder) GetFolders(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolders", reflect.TypeOf((*MockEmailRepository)(nil).GetFolders), email)
}

// GetMessageFolder mocks base method.
func (m *MockEmailRepository) GetMessageFolder(msgID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageFolder", msgID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageFolder indicates an expected call of GetMessageFolder.
func (mr *MockEmailRepositoryMockRecorder) GetMessageFolder(msgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageFolder", reflect.TypeOf((*MockEmailRepository)(nil).GetMessageFolder), msgID)
}

// GetNewEmails mocks base method.
func (m *MockEmailRepository) GetNewEmails(email string, LastModified time.Time) ([]models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewEmails", email, LastModified)
	ret0, _ := ret[0].([]models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewEmails indicates an expected call of GetNewEmails.
func (mr *MockEmailRepositoryMockRecorder) GetNewEmails(email, LastModified interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewEmails", reflect.TypeOf((*MockEmailRepository)(nil).GetNewEmails), email, LastModified)
}

// GetSentEmails mocks base method.
func (m *MockEmailRepository) GetSentEmails(senderEmail string) ([]models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentEmails", senderEmail)
	ret0, _ := ret[0].([]models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentEmails indicates an expected call of GetSentEmails.
func (mr *MockEmailRepositoryMockRecorder) GetSentEmails(senderEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentEmails", reflect.TypeOf((*MockEmailRepository)(nil).GetSentEmails), senderEmail)
}

// GetTimestamp mocks base method.
func (m *MockEmailRepository) GetTimestamp(ctx context.Context, email string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestamp", ctx, email)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimestamp indicates an expected call of GetTimestamp.
func (mr *MockEmailRepositoryMockRecorder) GetTimestamp(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestamp", reflect.TypeOf((*MockEmailRepository)(nil).GetTimestamp), ctx, email)
}

// Inbox mocks base method.
func (m *MockEmailRepository) Inbox(id string) ([]models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inbox", id)
	ret0, _ := ret[0].([]models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inbox indicates an expected call of Inbox.
func (mr *MockEmailRepositoryMockRecorder) Inbox(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inbox", reflect.TypeOf((*MockEmailRepository)(nil).Inbox), id)
}

// RenameFolder mocks base method.
func (m *MockEmailRepository) RenameFolder(email, folderName, newFolderName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameFolder", email, folderName, newFolderName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameFolder indicates an expected call of RenameFolder.
func (mr *MockEmailRepositoryMockRecorder) RenameFolder(email, folderName, newFolderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFolder", reflect.TypeOf((*MockEmailRepository)(nil).RenameFolder), email, folderName, newFolderName)
}

// SaveEmail mocks base method.
func (m *MockEmailRepository) SaveEmail(email models.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEmail indicates an expected call of SaveEmail.
func (mr *MockEmailRepositoryMockRecorder) SaveEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEmail", reflect.TypeOf((*MockEmailRepository)(nil).SaveEmail), email)
}

// SetTimestamp mocks base method.
func (m *MockEmailRepository) SetTimestamp(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTimestamp", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTimestamp indicates an expected call of SetTimestamp.
func (mr *MockEmailRepositoryMockRecorder) SetTimestamp(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimestamp", reflect.TypeOf((*MockEmailRepository)(nil).SetTimestamp), ctx, email)
}

// UpdateDraft mocks base method.
func (m *MockEmailRepository) UpdateDraft(email models.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDraft", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDraft indicates an expected call of UpdateDraft.
func (mr *MockEmailRepositoryMockRecorder) UpdateDraft(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDraft", reflect.TypeOf((*MockEmailRepository)(nil).UpdateDraft), email)
}

// UploadAttach mocks base method.
func (m *MockEmailRepository) UploadAttach(ctx context.Context, fileContent []byte, filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAttach", ctx, fileContent, filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAttach indicates an expected call of UploadAttach.
func (mr *MockEmailRepositoryMockRecorder) UploadAttach(ctx, fileContent, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAttach", reflect.TypeOf((*MockEmailRepository)(nil).UploadAttach), ctx, fileContent, filename)
}

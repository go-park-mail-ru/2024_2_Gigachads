// Code generated by MockGen. DO NOT EDIT.
	// Source: models/email_model.go

// Package mock_email is a generated GoMock package.
package mocks

import (
	context "context"
	models "mail/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailUseCase is a mock of EmailUseCase interface.
type MockEmailUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockEmailUseCaseMockRecorder
}

// MockEmailUseCaseMockRecorder is the mock recorder for MockEmailUseCase.
type MockEmailUseCaseMockRecorder struct {
	mock *MockEmailUseCase
}

// NewMockEmailUseCase creates a new mock instance.
func NewMockEmailUseCase(ctrl *gomock.Controller) *MockEmailUseCase {
	mock := &MockEmailUseCase{ctrl: ctrl}
	mock.recorder = &MockEmailUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailUseCase) EXPECT() *MockEmailUseCaseMockRecorder {
	return m.recorder
}

// ChangeEmailFolder mocks base method.
func (m *MockEmailUseCase) ChangeEmailFolder(id int, email, folderName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeEmailFolder", id, email, folderName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeEmailFolder indicates an expected call of ChangeEmailFolder.
func (mr *MockEmailUseCaseMockRecorder) ChangeEmailFolder(id, email, folderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeEmailFolder", reflect.TypeOf((*MockEmailUseCase)(nil).ChangeEmailFolder), id, email, folderName)
}

// ChangeStatus mocks base method.
func (m *MockEmailUseCase) ChangeStatus(id int, status bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeStatus indicates an expected call of ChangeStatus.
func (mr *MockEmailUseCaseMockRecorder) ChangeStatus(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockEmailUseCase)(nil).ChangeStatus), id, status)
}

// CreateDraft mocks base method.
func (m *MockEmailUseCase) CreateDraft(email models.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDraft", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDraft indicates an expected call of CreateDraft.
func (mr *MockEmailUseCaseMockRecorder) CreateDraft(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDraft", reflect.TypeOf((*MockEmailUseCase)(nil).CreateDraft), email)
}

// CreateFolder mocks base method.
func (m *MockEmailUseCase) CreateFolder(email, folderName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", email, folderName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFolder indicates an expected call of CreateFolder.
func (mr *MockEmailUseCaseMockRecorder) CreateFolder(email, folderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockEmailUseCase)(nil).CreateFolder), email, folderName)
}

// DeleteEmails mocks base method.
func (m *MockEmailUseCase) DeleteEmails(userEmail string, messageIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmails", userEmail, messageIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmails indicates an expected call of DeleteEmails.
func (mr *MockEmailUseCaseMockRecorder) DeleteEmails(userEmail, messageIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmails", reflect.TypeOf((*MockEmailUseCase)(nil).DeleteEmails), userEmail, messageIDs)
}

// DeleteFolder mocks base method.
func (m *MockEmailUseCase) DeleteFolder(email, folderName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolder", email, folderName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFolder indicates an expected call of DeleteFolder.
func (mr *MockEmailUseCaseMockRecorder) DeleteFolder(email, folderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockEmailUseCase)(nil).DeleteFolder), email, folderName)
}

// ForwardEmail mocks base method.
func (m *MockEmailUseCase) ForwardEmail(ctx context.Context, from string, to []string, originalEmail models.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardEmail", ctx, from, to, originalEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForwardEmail indicates an expected call of ForwardEmail.
func (mr *MockEmailUseCaseMockRecorder) ForwardEmail(ctx, from, to, originalEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardEmail", reflect.TypeOf((*MockEmailUseCase)(nil).ForwardEmail), ctx, from, to, originalEmail)
}

// GetEmailByID mocks base method.
func (m *MockEmailUseCase) GetEmailByID(id int) (models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailByID", id)
	ret0, _ := ret[0].(models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailByID indicates an expected call of GetEmailByID.
func (mr *MockEmailUseCaseMockRecorder) GetEmailByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailByID", reflect.TypeOf((*MockEmailUseCase)(nil).GetEmailByID), id)
}

// GetFolderEmails mocks base method.
func (m *MockEmailUseCase) GetFolderEmails(email, folderName string) ([]models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderEmails", email, folderName)
	ret0, _ := ret[0].([]models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderEmails indicates an expected call of GetFolderEmails.
func (mr *MockEmailUseCaseMockRecorder) GetFolderEmails(email, folderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderEmails", reflect.TypeOf((*MockEmailUseCase)(nil).GetFolderEmails), email, folderName)
}

// GetFolders mocks base method.
func (m *MockEmailUseCase) GetFolders(email string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolders", email)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolders indicates an expected call of GetFolders.
func (mr *MockEmailUseCaseMockRecorder) GetFolders(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolders", reflect.TypeOf((*MockEmailUseCase)(nil).GetFolders), email)
}

// GetSentEmails mocks base method.
func (m *MockEmailUseCase) GetSentEmails(senderEmail string) ([]models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentEmails", senderEmail)
	ret0, _ := ret[0].([]models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentEmails indicates an expected call of GetSentEmails.
func (mr *MockEmailUseCaseMockRecorder) GetSentEmails(senderEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentEmails", reflect.TypeOf((*MockEmailUseCase)(nil).GetSentEmails), senderEmail)
}

// Inbox mocks base method.
func (m *MockEmailUseCase) Inbox(id string) ([]models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inbox", id)
	ret0, _ := ret[0].([]models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inbox indicates an expected call of Inbox.
func (mr *MockEmailUseCaseMockRecorder) Inbox(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inbox", reflect.TypeOf((*MockEmailUseCase)(nil).Inbox), id)
}

// RenameFolder mocks base method.
func (m *MockEmailUseCase) RenameFolder(email, folderName, newFolderName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameFolder", email, folderName, newFolderName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameFolder indicates an expected call of RenameFolder.
func (mr *MockEmailUseCaseMockRecorder) RenameFolder(email, folderName, newFolderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFolder", reflect.TypeOf((*MockEmailUseCase)(nil).RenameFolder), email, folderName, newFolderName)
}

// ReplyEmail mocks base method.
func (m *MockEmailUseCase) ReplyEmail(ctx context.Context, from, to string, originalEmail models.Email, replyText string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyEmail", ctx, from, to, originalEmail, replyText)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyEmail indicates an expected call of ReplyEmail.
func (mr *MockEmailUseCaseMockRecorder) ReplyEmail(ctx, from, to, originalEmail, replyText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyEmail", reflect.TypeOf((*MockEmailUseCase)(nil).ReplyEmail), ctx, from, to, originalEmail, replyText)
}

// SaveEmail mocks base method.
func (m *MockEmailUseCase) SaveEmail(email models.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEmail indicates an expected call of SaveEmail.
func (mr *MockEmailUseCaseMockRecorder) SaveEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEmail", reflect.TypeOf((*MockEmailUseCase)(nil).SaveEmail), email)
}

// SendDraft mocks base method.
func (m *MockEmailUseCase) SendDraft(email models.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDraft", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDraft indicates an expected call of SendDraft.
func (mr *MockEmailUseCaseMockRecorder) SendDraft(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDraft", reflect.TypeOf((*MockEmailUseCase)(nil).SendDraft), email)
}

// SendEmail mocks base method.
func (m *MockEmailUseCase) SendEmail(ctx context.Context, from string, to []string, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, from, to, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailUseCaseMockRecorder) SendEmail(ctx, from, to, subject, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailUseCase)(nil).SendEmail), ctx, from, to, subject, body)
}

// UpdateDraft mocks base method.
func (m *MockEmailUseCase) UpdateDraft(email models.Draft) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDraft", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDraft indicates an expected call of UpdateDraft.
func (mr *MockEmailUseCaseMockRecorder) UpdateDraft(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDraft", reflect.TypeOf((*MockEmailUseCase)(nil).UpdateDraft), email)
}
